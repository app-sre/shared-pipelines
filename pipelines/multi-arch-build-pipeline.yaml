# Single arch build (amd64)
# Note, that we keep the multi-arch filename because we dont want to change refs in all repos
apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: single-arch-build-pipeline
spec:
  finally:
  - name: show-sbom
    params:
    - name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    taskRef:
      params:
      - name: name
        value: show-sbom
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-show-sbom:0.1@sha256:beb0616db051952b4b861dd8c3e00fa1c0eccbd926feddf71194d3bb3ace9ce7
      - name: kind
        value: task
      resolver: bundles
  - name: show-summary
    params:
    - name: pipelinerun-name
      value: $(context.pipelineRun.name)
    - name: git-url
      value: $(tasks.clone-repository.results.url)?rev=$(tasks.clone-repository.results.commit)
    - name: image-url
      value: $(params.output-image)
    - name: build-task-status
      value: $(tasks.build-image-index.status)
    taskRef:
      params:
      - name: name
        value: summary
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-summary:0.2@sha256:3f6e8513cbd70f0416eb6c6f2766973a754778526125ff33d8e3633def917091
      - name: kind
        value: task
      resolver: bundles
    workspaces:
    - name: workspace
      workspace: workspace
  workspaces:
  - name: workspace
  - name: git-auth
    optional: true
  - name: netrc
    optional: true
  params:
  - default: ""
    description: Specify which stage to build in a multi-stage Dockerfile.
    name: target-stage
    type: string
  # https://github.com/konflux-ci/build-definitions/tree/main/task/buildah/0.5
  - default: true
    description: Whether to skip stages in Containerfile that seem unused by subsequent stages
    name: skip-unused-stages
    type: string
  - description: Source Repository URL
    name: git-url
    type: string
  - default: ""
    description: Revision of the Source Repository
    name: revision
    type: string
  - description: Fully Qualified Output Image
    name: output-image
    type: string
  - default: .
    description: Path to the source code of an application's component from where to build image.
    name: path-context
    type: string
  - default: Dockerfile
    description: Path to the Dockerfile inside the context specified by parameter path-context
    name: dockerfile
    type: string
  - default: "false"
    description: Force rebuild image
    name: rebuild
    type: string
  - default: "false"
    description: Skip checks against built image
    name: skip-checks
    type: string
  - default: "false"
    description: Execute the build with network isolation
    name: hermetic
    type: string
  - default: ""
    description: Build dependencies to be prefetched by Cachi2
    name: prefetch-input
    type: string
  - default: ""
    description: Image tag expiration time, time values could be something like 1h, 2d, 3w for hours, days, and weeks, respectively.
    name: image-expires-after
  - default: "false"
    description: Build a source image.
    name: build-source-image
    type: string
  - default: "false"
    description: Add built image into an OCI image index
    name: build-image-index
    type: string
  - default: []
    description: Array of --build-arg values ("arg=value" strings) for buildah
    name: build-args
    type: array
  - default: ""
    description: Path to a file with build arguments for buildah, see https://www.mankier.com/1/buildah-build#--build-arg-file
    name: build-args-file
    type: string
  - default: "does-not-exist"
    description: Name of a secret which will be made available to the build with 'buildah build --secret' at /run/secrets/$ADDITIONAL_SECRET
    name: additional_secret
    type: string
  - default: "false"
      # https://github.com/konflux-ci/build-definitions/tree/main/task/git-clone/0.1
    description: Fetch all tags for the repo.
    name: fetchTags
    type: string
  - default: "1"
      # https://github.com/konflux-ci/build-definitions/tree/main/task/git-clone/0.1
    description: Perform a shallow clone, fetching only the most recent N commits.
    name: cloneDepth
    type: string
  - default: ""
    description: Script to run in ephemeral namespace. If empty, ephemeral namespace tasks are skipped.
    name: ephemeral-namespace-run-script
    type: string
    # https://catalog.redhat.com/software/containers/openshift4/ose-cli/5cd9ba3f5a13467289f4d51d/history?architecture=amd64
  - default: "v4.15"
    description: Tag of the OpenShift CLI from registry.redhat.io/openshift4/ose-cli to use for ephemeral namespace tasks.
    name: ephemeral-namespace-oc-cli-version
    type: string
  - default: ""
    description: Path to a file with goss tests for container structure test.
    name: goss-container-structure-test-file
    type: string
  - default: "30s"
    description: Timeout for pod under-test to be ready in ephemeral environment tests.
    name: ephemeral-pod-wait-timeout
    type: string
  - default: ""
    description: User ID responsible for the commit
    name: github-user-id
    type: string
  - default: ""
    description: Type of the PR for SQS auto bumping to know which repo to bump
    name: sqs-pr-type
    type: string
  - name: buildah-format
    default: docker
    type: string
    description: The format for the resulting image's mediaType. Valid values are oci or docker.
  results:
  - description: ""
    name: IMAGE_URL
    value: $(tasks.build-image-index.results.IMAGE_URL)
  - description: ""
    name: IMAGE_DIGEST
    value: $(tasks.build-image-index.results.IMAGE_DIGEST)
  - description: ""
    name: CHAINS-GIT_URL
    value: $(tasks.clone-repository.results.url)
  - description: ""
    name: CHAINS-GIT_COMMIT
    value: $(tasks.clone-repository.results.commit)
  tasks:
  - name: init
    params:
    - name: image-url
      value: $(params.output-image)
    - name: rebuild
      value: $(params.rebuild)
    - name: skip-checks
      value: $(params.skip-checks)
    taskRef:
      params:
      - name: name
        value: init
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-init:0.2@sha256:bbf313b09740fb39b3343bc69ee94b2a2c21d16a9304f9b7c111c305558fc346
      - name: kind
        value: task
      resolver: bundles
  - name: clone-repository
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.revision)
          # https://github.com/konflux-ci/build-definitions/tree/main/task/git-clone/0.1
    - name: fetchTags
      value: $(params.fetchTags)
    - name: depth
      value: $(params.cloneDepth)
    runAfter:
    - init
    taskRef:
      params:
      - name: name
        value: git-clone
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1@sha256:20045cfa05edecc1a1c17d9cafb5371a1d6cd5a0a467653fe79917d4ea56cb9c
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
    workspaces:
    - name: output
      workspace: workspace
    - name: basic-auth
      workspace: git-auth
  - name: prefetch-dependencies
    params:
    - name: input
      value: $(params.prefetch-input)
    runAfter:
    - clone-repository
    taskRef:
      params:
      - name: name
        value: prefetch-dependencies
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-prefetch-dependencies:0.2@sha256:4e178d3f538bd20cb84d94a2542724fb2eed92eaebaf76275ce514ceca7a13b7
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.prefetch-input)
      operator: notin
      values:
      - ""
    workspaces:
    - name: source
      workspace: workspace
    - name: git-basic-auth
      workspace: git-auth
    - name: netrc
      workspace: netrc
  - name: build-container
    params:
    - name: IMAGE
      value: $(params.output-image)
    - name: DOCKERFILE
      value: $(params.dockerfile)
    - name: CONTEXT
      value: $(params.path-context)
    - name: HERMETIC
      value: $(params.hermetic)
    - name: TARGET_STAGE
      value: $(params.target-stage)
    - name: PREFETCH_INPUT
      value: $(params.prefetch-input)
    - name: IMAGE_EXPIRES_AFTER
      value: $(params.image-expires-after)
    - name: COMMIT_SHA
      value: $(tasks.clone-repository.results.commit)
    - name: BUILD_ARGS
      value:
      - $(params.build-args[*])
    - name: BUILD_ARGS_FILE
      value: $(params.build-args-file)
    - name: ADDITIONAL_SECRET
      value: $(params.additional_secret)
    - name: BUILDAH_FORMAT
      value: $(params.buildah-format)
    - name: SKIP_UNUSED_STAGES
      value: $(params.skip-unused-stages)
    runAfter:
    - prefetch-dependencies
    taskRef:
      params:
      - name: name
        value: buildah
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-buildah:0.5@sha256:9ac12870766a980e1f7ae7ddd0852f767da000d8a6d24f5b37e906eb14932355
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
    workspaces:
    - name: source
      workspace: workspace
  - name: build-image-index
    params:
    - name: IMAGE
      value: $(params.output-image)
    - name: COMMIT_SHA
      value: $(tasks.clone-repository.results.commit)
    - name: IMAGE_EXPIRES_AFTER
      value: $(params.image-expires-after)
    - name: ALWAYS_BUILD_INDEX
      value: $(params.build-image-index)
    - name: IMAGES
      value:
      - $(tasks.build-container.results.IMAGE_URL)@$(tasks.build-container.results.IMAGE_DIGEST)
    - name: BUILDAH_FORMAT
      value: $(params.buildah-format)
    runAfter:
    - build-container
    taskRef:
      params:
      - name: name
        value: build-image-index
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-build-image-index:0.1@sha256:79784d53749584bc5a8de32142ec4e2f01cdbf42c20d94e59280e0b927c8597d
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
  - name: build-source-image
    params:
    - name: BINARY_IMAGE
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: BINARY_IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: source-build
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-source-build:0.3@sha256:268bf4dba7455ef3871d84bc26de1800b8221a0d1809c9f5101616bccfa84d33
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
    - input: $(params.build-source-image)
      operator: in
      values:
      - "true"
    workspaces:
    - name: workspace
      workspace: workspace
  - name: deprecated-base-image-check
    params:
    - name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: deprecated-image-check
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-deprecated-image-check:0.5@sha256:f59175d9a0a60411738228dfe568af4684af4aa5e7e05c832927cb917801d489
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
  - name: clair-scan
    params:
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: clair-scan
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-clair-scan:0.3@sha256:a7cc183967f89c4ac100d04ab8f81e54733beee60a0528208107c9a22d3c43af
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
  - name: ecosystem-cert-preflight-checks
    params:
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: ecosystem-cert-preflight-checks
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-ecosystem-cert-preflight-checks:0.2@sha256:dae8e28761cee4ab0baf04ab9f8f1a4b3cee3c7decf461fda2bacc5c01652a60
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
  - name: sast-snyk-check
    params:
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: sast-snyk-check
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-sast-snyk-check:0.4@sha256:b487b08bd617d28adb47ee7c217b148b26b22bf906775b9f0ae7055acd042416
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    workspaces:
    - name: workspace
      workspace: workspace
  - name: sast-shell-check
    params:
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: sast-shell-check
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-sast-shell-check:0.1@sha256:4a63982791a1a68f560c486f524ef5b9fdbeee0c16fe079eee3181a2cfd1c1bf
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    workspaces:
    - name: workspace
      workspace: workspace
  - name: sast-unicode-check
    params:
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: sast-unicode-check
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-sast-unicode-check:0.3@sha256:bec18fa5e82e801c3f267f29bf94535a5024e72476f2b27cca7271d506abb5ad
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    workspaces:
    - name: workspace
      workspace: workspace
  - name: clamav-scan
    params:
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: clamav-scan
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-clamav-scan:0.3@sha256:b0bd59748cda4a7abf311e4f448e6c1d00c6b6d8c0ecc1c2eb33e08dc0e0b802
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
  - name: apply-tags
    params:
    - name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: apply-tags
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-apply-tags:0.2@sha256:f44be1bf0262471f2f503f5e19da5f0628dcaf968c86272a2ad6b4871e708448
      - name: kind
        value: task
      resolver: bundles
  - name: push-dockerfile
    params:
    - name: IMAGE
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    - name: DOCKERFILE
      value: $(params.dockerfile)
    - name: CONTEXT
      value: $(params.path-context)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: push-dockerfile
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-push-dockerfile:0.1@sha256:74e982c07a808eaa5b1d8c126cafcbf3cc6ce94c883cf0845b55ce8064674b45
      - name: kind
        value: task
      resolver: bundles
    workspaces:
    - name: workspace
      workspace: workspace
  - name: rpms-signature-scan
    params:
    - name: image-url
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: image-digest
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    runAfter:
    - build-image-index
    taskRef:
      params:
      - name: name
        value: rpms-signature-scan
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-rpms-signature-scan:0.2@sha256:1b6c20ab3dbfb0972803d3ebcb2fa72642e59400c77bd66dfd82028bdd09e120
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
            ########################
            # Custom Sections
            ########################
    # Lets make source code available in compliant fashion
    # TODO: ideally whole pipeline gets converted to use OCI-TA compliance
  - name: clone-repository-oci-ta
    params:
    - name: url
      value: $(params.git-url)
    - name: revision
      value: $(params.revision)
    - name: ociStorage
      value: $(params.output-image).git
    - name: ociArtifactExpiresAfter
      value: $(params.image-expires-after)
    runAfter:
    - init
    taskRef:
      params:
      - name: name
        value: git-clone-oci-ta
      - name: bundle
        value: quay.io/konflux-ci/tekton-catalog/task-git-clone-oci-ta:0.1@sha256:0d80f66610efd1f957700f61dcd5080689321b10ad544e136d58fc4673290d1b
      - name: kind
        value: task
      resolver: bundles
    when:
    - input: $(tasks.init.results.build)
      operator: in
      values:
      - "true"
    - input: "$(params.ephemeral-namespace-run-script)$(params.goss-container-structure-test-file)$(params.sqs-pr-type)"
      operator: notin
      values:
      - ""
    workspaces:
    - name: basic-auth
      workspace: git-auth
    ### Setup ephemeral namespace
  - name: deploy-ephemeral-namespace
    runAfter:
    - clone-repository-oci-ta
    taskRef:
      resolver: git
      params:
      - name: url
        value: https://github.com/konflux-ci/build-definitions.git
      - name: revision
            # Note, we must use a concrete commit ID or enterprise contract will fail
            # The violation log will show you the allowed/trusted commit ref to use
        value: 05686269c33b8f1aac66252c0c7b859b42dca2ed
      - name: pathInRepo
        value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      - name: shortCommitLength
        value: 7
    params:
    - name: ownerName
      value: $(context.pipelineRun.name)
    - name: ownerUid
      value: $(context.pipelineRun.uid)
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    - input: "$(params.ephemeral-namespace-run-script)$(params.goss-container-structure-test-file)"
      operator: notin
      values:
      - ""
    ### Container Structure Test
    # For task compliance follow https://konflux.pages.redhat.com/docs/users/building/using-trusted-artifacts.html#migrate-to-trusted-artifacts
  - name: container-structure-test
    runAfter:
    - deploy-ephemeral-namespace
    - build-image-index
    params:
    - name: SOURCE_ARTIFACT
      value: $(tasks.clone-repository-oci-ta.results.SOURCE_ARTIFACT)
    - name: SCRIPT_PATH
      value: $(params.goss-container-structure-test-file)
    - name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: POD_WAIT_TIMEOUT
      value: $(params.ephemeral-pod-wait-timeout)
    taskSpec:
      params:
      - description: The Trusted Artifact URI pointing to the artifact with the application source code.
        name: SOURCE_ARTIFACT
        type: string
      stepTemplate:
        volumeMounts:
        - mountPath: /var/workdir
          name: workdir
      volumes:
          # New volume to store a copy of the source code accessible only to this Task.
      - name: workdir
        emptyDir: {}
      steps:
          # New step to fetch the Trusted Artifact and make it available to the next steps.
      - name: use-trusted-artifact
        image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
        args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
      - name: run-script
        image: registry.redhat.io/openshift4/ose-cli:$(params.ephemeral-namespace-oc-cli-version)
        workingDir: /var/workdir/source
        env:
        - name: KUBECONFIG_VALUE
          valueFrom:
            secretKeyRef:
              name: "$(tasks.deploy-ephemeral-namespace.results.secretRef)"
              key: kubeconfig
        - name: SCRIPT_PATH
          value: $(params.goss-container-structure-test-file)
        - name: IMAGE_URL
          value: $(tasks.build-image-index.results.IMAGE_URL)
        - name: POD_WAIT_TIMEOUT
          value: $(params.ephemeral-pod-wait-timeout)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Lets ensure a unique job name - just to be safe
          JOB_NAME="goss-test-$(uuidgen)"

          # Expose KUBECONFIG for test namespace
          echo "$KUBECONFIG_VALUE" > /tmp/cfg
          export KUBECONFIG=/tmp/cfg

          # Cleanup function to ensure resources are deleted
          cleanup() {
            echo "Cleanup"
            oc delete job ${JOB_NAME} 2>/dev/null || true
            oc delete configmap ${JOB_NAME} 2>/dev/null || true
          }
          trap cleanup EXIT

          # Create ConfigMap with goss test file
          echo "Creating ConfigMap with goss test configuration"
          oc create configmap ${JOB_NAME} --from-file=goss.yaml=${SCRIPT_PATH}

          # Create job definition at /tmp/job.yaml
          cat > /tmp/job.yaml <<EOF
          apiVersion: batch/v1
          kind: Job
          metadata:
            name: ${JOB_NAME}
            labels:
              app: ${JOB_NAME}
              env: ci
          spec:
            backoffLimit: 0
            template:
              metadata:
                labels:
                  app: ${JOB_NAME}
              spec:
                restartPolicy: Never
                initContainers:
                - name: copy-goss
                  image: ghcr.io/goss-org/goss:v0.4.9
                  command: ["/bin/sh", "-c"]
                  args:
                  - |
                    cp /usr/bin/goss /goss/bin/goss
                    chmod +x /goss/bin/goss
                  volumeMounts:
                  - name: goss-bin
                    mountPath: /goss/bin
                containers:
                - name: app
                  image: ${IMAGE_URL}
                  command: ["/goss/bin/goss"]
                  args: ["--gossfile", "/goss/config/goss.yaml", "validate"]
                  volumeMounts:
                  - name: goss-bin
                    mountPath: /goss/bin
                  - name: goss-config
                    mountPath: /goss/config
                volumes:
                - name: goss-bin
                  emptyDir: {}
                - name: goss-config
                  configMap:
                    name: ${JOB_NAME}
          EOF

          echo "Deploy goss test job for ${IMAGE_URL}"
          oc apply -f /tmp/job.yaml

          echo "Wait for job to complete"
          oc wait --for=condition=Complete job/${JOB_NAME} --timeout=${POD_WAIT_TIMEOUT} || true

          echo "Job logs:"
          oc logs job/${JOB_NAME}

          # Check if job succeeded
          JOB_STATUS=$(oc get job ${JOB_NAME} -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}')
          if [ "$JOB_STATUS" != "True" ]; then
            echo "Job failed!"
            exit 1
          fi
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    - input: $(params.goss-container-structure-test-file)
      operator: notin
      values:
      - ""
    ### Custom script run in ephemeral namespace
    # For task compliance follow https://konflux.pages.redhat.com/docs/users/building/using-trusted-artifacts.html#migrate-to-trusted-artifacts
  - name: run-custom-script-in-ephemeral-namespace
    runAfter:
    - container-structure-test
    - build-image-index
    params:
    - name: SOURCE_ARTIFACT
      value: $(tasks.clone-repository-oci-ta.results.SOURCE_ARTIFACT)
    - name: SCRIPT_PATH
      value: $(params.ephemeral-namespace-run-script)
    - name: IMAGE_URL
      value: $(tasks.build-image-index.results.IMAGE_URL)
    - name: IMAGE_DIGEST
      value: $(tasks.build-image-index.results.IMAGE_DIGEST)
    taskSpec:
      params:
      - description: The Trusted Artifact URI pointing to the artifact with the application source code.
        name: SOURCE_ARTIFACT
        type: string
      stepTemplate:
        volumeMounts:
        - mountPath: /var/workdir
          name: workdir
      volumes:
          # New volume to store a copy of the source code accessible only to this Task.
      - name: workdir
        emptyDir: {}
      steps:
          # New step to fetch the Trusted Artifact and make it available to the next steps.
      - name: use-trusted-artifact
        image: quay.io/redhat-appstudio/build-trusted-artifacts:latest@sha256:9b180776a41d9a22a1c51539f1647c60defbbd55b44bbebdd4130e33512d8b0d
        args:
        - use
        - $(params.SOURCE_ARTIFACT)=/var/workdir/source
      - name: run-script
        image: registry.redhat.io/openshift4/ose-cli:$(params.ephemeral-namespace-oc-cli-version)
        workingDir: /var/workdir/source
        env:
        - name: KUBECONFIG_VALUE
          valueFrom:
            secretKeyRef:
              name: "$(tasks.deploy-ephemeral-namespace.results.secretRef)"
              key: kubeconfig
        - name: SCRIPT_PATH
          value: $(params.ephemeral-namespace-run-script)
        - name: IMAGE_URL
          value: $(tasks.build-image-index.results.IMAGE_URL)
        - name: IMAGE_DIGEST
          value: $(tasks.build-image-index.results.IMAGE_DIGEST)
        script: |
          #!/usr/bin/env bash
          set -euo pipefail

          # Expose KUBECONFIG for test namespace
          echo "$KUBECONFIG_VALUE" > /tmp/cfg
          export KUBECONFIG=/tmp/cfg

          echo "Running script ${SCRIPT_PATH}"
          chmod +x ./${SCRIPT_PATH}
          ./${SCRIPT_PATH}
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    - input: $(params.ephemeral-namespace-run-script)
      operator: notin
      values:
      - ""
    # send SQS message for auto bump MRs
  - name: send-sqs-message
    params:
    - name: sqs-pr-type
      value: $(params.sqs-pr-type)
    - name: skip-checks
      value: $(params.skip-checks)
    - name: github-user-id
      value: $(params.github-user-id)
    runAfter:
    - clamav-scan
    - push-dockerfile
    - clair-scan
    - rpms-signature-scan
    - run-custom-script-in-ephemeral-namespace
    - ecosystem-cert-preflight-checks
    - apply-tags
    - sast-shell-check
    - deprecated-base-image-check
    - sast-unicode-check
    - build-source-image
    - sast-snyk-check
    taskSpec:
      steps:
      - name: run-script
            # TODO: do we have sth from redhat here?
        image: public.ecr.aws/aws-cli/aws-cli:2.31.18@sha256:d3f5b7078a71fd7cb488719571c50abd252f4320cdf375601f2d6d40caf97b55
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: app-sre-app-interface-sqs-credentials
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: app-sre-app-interface-sqs-credentials
              key: aws_secret_access_key
        - name: AWS_REGION
          valueFrom:
            secretKeyRef:
              name: app-sre-app-interface-sqs-credentials
              key: aws_region
        - name: SQS_QUEUE_URL
          valueFrom:
            secretKeyRef:
              name: app-sre-app-interface-sqs-credentials
              key: sqs_url
        - name: GITHUB_USER_ID
          value: $(params.github-user-id)
        - name: PR_TYPE
          value: $(params.sqs-pr-type)
        - name: COMMIT
          value: $(tasks.clone-repository-oci-ta.results.commit)
        - name: SHORT_COMMIT
          value: $(tasks.clone-repository-oci-ta.results.short-commit)
        script: |
          #!/usr/bin/env bash
          echo "GITHUB_USER_ID: ${GITHUB_USER_ID}"
          echo "COMMIT: ${COMMIT}"
          echo "SHORT_COMMIT: ${SHORT_COMMIT}"
          echo "AWS_REGION: ${AWS_REGION}"
          echo "SQS_QUEUE_URL: ${SQS_QUEUE_URL}"
          echo "PR_TYPE: ${PR_TYPE}"
          aws sqs send-message --queue-url ${SQS_QUEUE_URL} --message-body "{\"pr_type\": \"${PR_TYPE}\", \"version\": \"${SHORT_COMMIT}\", \"commit_sha\": \"${COMMIT}\", \"github_user_id\": \"${GITHUB_USER_ID}\"}"
    when:
    - input: $(params.skip-checks)
      operator: in
      values:
      - "false"
    - input: $(params.sqs-pr-type)
      operator: notin
      values:
      - ""
